import tkinter as tk
from tkinter import scrolledtext
from tkinter import messagebox
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import random

# Load dataset
def load_dataset(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    
    X, y = [], []
    for line in lines:
        line = line.strip()  # Remove leading and trailing whitespace
        
        if not line:  # Skip empty lines
            continue
        
        parts = line.split('||')
        if len(parts) == 2:
            X.append(parts[0])
            y.append(parts[1].strip())  # Strip leading and trailing whitespace from the summary
        else:
            print(f"Ignoring line: {line}")  # Print the problematic line for debugging
    
    if len(X) == 0:
        raise ValueError("No valid data found in the file.")
    
    return X, y


# Train and test machine learning models
def train_test_models(X, y):
    if len(X) == 0:
        raise ValueError("No data available for training.")

    # Split data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)
    
    # Vectorize text data
    vectorizer = TfidfVectorizer()
    X_train_vect = vectorizer.fit_transform(X_train)
    X_test_vect = vectorizer.transform(X_test)
    
    # Train models
    logistic_reg_model = LogisticRegression()
    logistic_reg_model.fit(X_train_vect, y_train)
    
    random_forest_model = RandomForestClassifier()
    random_forest_model.fit(X_train_vect, y_train)
    
    # Evaluate models
    logistic_reg_pred = logistic_reg_model.predict(X_test_vect)
    random_forest_pred = random_forest_model.predict(X_test_vect)
    
    # Calculate accuracy
    logistic_reg_accuracy = accuracy_score(y_test, logistic_reg_pred) * 100
    random_forest_accuracy = accuracy_score(y_test, random_forest_pred) * 100
    
    return logistic_reg_accuracy, random_forest_accuracy


def summarize_text(input_text, num_sentences):
    # Generate a random summary for demonstration purposes
    summary = ""
    for _ in range(num_sentences):
        summary += input_text.split('.')[random.randint(0, len(input_text.split('.'))-1)].strip() + ". "
    return summary

# Load and preprocess dataset
try:
    X, y = load_dataset('Data_Summary.txt')
    
    # Print loaded data
    print("Loaded X samples:")
    print(X[:5])  # Print the first 5 samples
    print("Loaded y samples:")
    print(y[:5])  # Print the corresponding summaries for the first 5 samples

    # Train and test machine learning models
    logistic_reg_accuracy, random_forest_accuracy = train_test_models(X, y)
    print("Logistic Regression Accuracy:", logistic_reg_accuracy)
    print("Random Forest Accuracy:", random_forest_accuracy)
except ValueError as e:
    print(e)
    logistic_reg_accuracy, random_forest_accuracy = 0, 0

# Create the main window
root = tk.Tk()
root.title("Text Summarizer")

# Input text box
input_label = tk.Label(root, text="Enter text:")
input_label.pack()
input_text_box = scrolledtext.ScrolledText(root, width=40, height=10)
input_text_box.pack()

# Number of sentences entry
num_sentences_label = tk.Label(root, text="Number of sentences in summary:")
num_sentences_label.pack()
num_sentences_entry = tk.Entry(root)
num_sentences_entry.pack()

# Button to summarize
summarize_button = tk.Button(root, text="Summarize", command=lambda: summarize_text_gui(input_text_box.get("1.0",'end-1c'), int(num_sentences_entry.get())))
summarize_button.pack()

# Summary text box
summary_label = tk.Label(root, text="Summary:")
summary_label.pack()
summary_text_box = scrolledtext.ScrolledText(root, width=40, height=5)
summary_text_box.pack()

# Display model evaluation results
logistic_reg_accuracy_label = tk.Label(root, text=f"Logistic Regression Accuracy: {logistic_reg_accuracy:.2f}%")
logistic_reg_accuracy_label.pack()

random_forest_accuracy_label = tk.Label(root, text=f"Random Forest Accuracy: {random_forest_accuracy:.2f}%")
random_forest_accuracy_label.pack()

def summarize_text_gui(input_text, num_sentences):
    summary = summarize_text(input_text, num_sentences)
    summary_text_box.delete('1.0', tk.END)
    summary_text_box.insert(tk.END, summary)

root.mainloop()
